[{"code":"","color":"#FF1E70ED","name":"development","typeName":"h","palette":"245","type":"h","spec":"Creat by Jxue"},{"code":"}\npublic static class LineChartView extends View {\n    \n    //Example library Line Chart View for Sketchware Jxue.\n\n    private static final float MAX_SMOOTH_VALUE \u003d 0.5f;\n    private static final float DEFAULT_SMOOTH_SIZE \u003d 0.3f;\n    private static final int DEFAULT_CIRCLE_SIZE \u003d %1$s;\n    private static final int DEFAULT_STROKE_SIZE \u003d %2$s;\n    private static final int DEFAULT_TEXT_SIZE \u003d %3$s;\n    private static final int DEFAULT_BORDER \u003d %4$s;\n\n    private static final int DEFAULT_CHART_COLOR \u003d %5$s;\n\n    private Paint chartLinePaint;\n    private Paint textPaint;\n    private Paint axisPaint;\n    private Path chartLinePath;\n    private List\u003cFloat\u003e values;\n    private List\u003cString\u003e axisXLabels;\n    private List\u003cString\u003e axisYLabels;\n    private float minY;\n    private float maxY;\n\n    private float circleSize;\n    private float strokeSize;\n    private float leftXOffset;\n    private float bottomYOffset;\n    private float rightXOffset;\n    private float topYOffset;\n    private float smoothSize \u003d DEFAULT_SMOOTH_SIZE;\n    private boolean isFillBottom \u003d true;\n    private boolean isShowPoints \u003d true;\n    private boolean isShowXAxis \u003d true;\n    private boolean isShowYAxis \u003d true;\n\n    public LineChartView(Context context) {\n        super(context);\n        init(context, null);\n    }\n\n    public LineChartView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n        init(context, attrs);\n    }\n\n    public LineChartView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init(context, attrs);\n    }\n\n    public LineChartView(Context context, @Nullable AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        init(context, attrs);\n    }\n\n    private void init(Context context, AttributeSet attrs) {\n        float scale \u003d context.getResources().getDisplayMetrics().density;\n        circleSize \u003d scale * DEFAULT_CIRCLE_SIZE;\n        leftXOffset \u003d circleSize / 2;\n        bottomYOffset \u003d leftXOffset;\n        rightXOffset \u003d leftXOffset;\n        topYOffset \u003d leftXOffset;\n        strokeSize \u003d scale * DEFAULT_STROKE_SIZE;\n\n        chartLinePaint \u003d new Paint();\n        chartLinePaint.setAntiAlias(true);\n        chartLinePaint.setStrokeWidth(strokeSize);\n\n        textPaint \u003d new Paint();\n        textPaint.setFlags(Paint.ANTI_ALIAS_FLAG);\n        textPaint.setColor(Color.GRAY);\n        textPaint.setTextSize(DEFAULT_TEXT_SIZE);\n\n        axisPaint \u003d new Paint();\n        axisPaint.setFlags(Paint.ANTI_ALIAS_FLAG);\n        axisPaint.setColor(Color.DKGRAY);\n\n        chartLinePath \u003d new Path();\n    }\n\n    public void setChartLineData(List\u003cFloat\u003e values) {\n        this.values \u003d values;\n        if (values.size() \u003e 0) {\n            maxY \u003d values.get(0);\n            minY \u003d values.get(0);\n            for (float y : values) {\n                if (y \u003e maxY) {\n                    maxY \u003d y;\n                }\n                if (y \u003c minY) {\n                    minY \u003d y;\n                }\n            }\n        }\n\n        invalidate();\n    }\n\n    public void setSmoothSize(float smoothSize) {\n        if (smoothSize \u003e MAX_SMOOTH_VALUE || smoothSize \u003c\u003d 0) {\n            Log.e(\"LineChartView\", \"Incorrect smooth value please use: (value \u003e 0 \u0026\u0026 value \u003c 0.5f) \");\n        } else {\n            this.smoothSize \u003d smoothSize;\n        }\n    }\n\n    public void setAxisXLabels(List\u003cString\u003e axisXLabels) {\n        this.axisXLabels \u003d axisXLabels;\n        if (axisXLabels !\u003d null \u0026\u0026 axisXLabels.size() \u003e 0) {\n            Rect labelRect \u003d calculateTextSize(axisXLabels.get(0), textPaint);\n            bottomYOffset \u003d labelRect.height() * 2;\n            rightXOffset \u003d labelRect.width() / 2;\n        }\n    }\n\n    public void setAxisYLabels(List\u003cString\u003e axisYLabels) {\n        this.axisYLabels \u003d axisYLabels;\n        if (axisYLabels !\u003d null \u0026\u0026 axisYLabels.size() \u003e 0) {\n            Rect labelRect \u003d calculateTextSize(axisYLabels.get(0), textPaint);\n            leftXOffset \u003d labelRect.width() + ((labelRect.width() / axisYLabels.get(0).length()) * 2);\n            topYOffset \u003d labelRect.height();\n//            float step \u003d (maxY - minY) / axisYLabels.length;\n//            maxY +\u003d step;\n//            minY \u003d minY \u003e 0 ? minY - step : 0;\n        }\n    }\n\n    public void setFillBottom(boolean fillBottom) {\n        isFillBottom \u003d fillBottom;\n    }\n\n    public void setShowPoints(boolean showPoints) {\n        isShowPoints \u003d showPoints;\n    }\n\n    public void setShowXAxis(boolean showXAxis) {\n        isShowXAxis \u003d showXAxis;\n    }\n\n    public void setShowYAxis(boolean showYAxis) {\n        isShowYAxis \u003d showYAxis;\n    }\n\n    public void setAxisTextSize(@DimenRes int textSizeRes) {\n        textPaint.setTextSize(getResources().getDimensionPixelSize(textSizeRes));\n    }\n\n    public void setAxisTextColor(@ColorRes int colorRes) {\n        axisPaint.setColor(getResources().getColor(colorRes));\n    }\n\n    private Rect calculateTextSize(String text, Paint textPaint) {\n        Rect bounds \u003d new Rect();\n        textPaint.getTextBounds(text, 0, text.length(), bounds);\n        return bounds;\n    }\n\n    private List\u003cPointF\u003e calculatePoints(List\u003cFloat\u003e values) {\n        int valueSize \u003d values.size();\n        final float widthWithoutBorders \u003d getMeasuredWidth() - leftXOffset - rightXOffset;\n        final float height \u003d getMeasuredHeight() - bottomYOffset - topYOffset;\n        final float dX \u003d valueSize \u003e 1 ? valueSize - 1 : 2;\n        final float dY \u003d (maxY - minY) \u003e 0 ? (maxY - minY) : 2;\n        List\u003cPointF\u003e points \u003d new ArrayList\u003cPointF\u003e(valueSize);\n        for (int i \u003d 0; i \u003c valueSize; i++) {\n            float x \u003d leftXOffset + i * widthWithoutBorders / (axisXLabels !\u003d null \u0026\u0026 axisXLabels.size() \u003e valueSize ? axisXLabels.size() - 1 : dX);\n            float y \u003d topYOffset + height - (values.get(i) - minY) * height / dY;\n            points.add(new PointF(x, y));\n        }\n        return points;\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        if (values !\u003d null \u0026\u0026 values.size() \u003e 0) {\n            List\u003cPointF\u003e points \u003d calculatePoints(values);\n            drawChartLine(canvas, points);\n            drawPointCircles(canvas, points);\n            drawAxisYLabels(canvas);\n            drawAxisXLabels(canvas);\n        }\n    }\n\n    private void drawChartLine(Canvas canvas, List\u003cPointF\u003e points) {\n        int size \u003d points.size();\n        final float height \u003d getMeasuredHeight() - bottomYOffset;\n\n        chartLinePath.reset();\n\n        // Calculate smooth chart line\n        float lX \u003d 0, lY \u003d 0;\n        chartLinePath.moveTo(points.get(0).x, points.get(0).y);\n        for (int i \u003d 0; i \u003c size; i++) {\n            // We have to skip first point\n            PointF currentPoint \u003d points.get(i);\n            if(i \u003e 0) {\n                // first control point\n                PointF previousPoint \u003d points.get(i - 1);    // previous point\n                float x1 \u003d previousPoint.x + lX;\n                float y1 \u003d previousPoint.y + lY;\n\n                // second control point\n                PointF p1 \u003d points.get(i + 1 \u003c size ? i + 1 : i);    // next point\n                lX \u003d (p1.x - previousPoint.x) / 2 * smoothSize;        // (lX,lY) is the slope of the reference line\n                lY \u003d (p1.y - previousPoint.y) / 2 * smoothSize;\n                float x2 \u003d currentPoint.x - lX;\n                float y2 \u003d currentPoint.y - lY;\n\n                chartLinePath.cubicTo(x1, y1, x2, y2, currentPoint.x, currentPoint.y);\n            }\n\n            if (isShowYAxis) {\n                // Y Axis lines\n                canvas.drawLine(currentPoint.x, getMeasuredHeight() - bottomYOffset, currentPoint.x, topYOffset, axisPaint);\n            }\n        }\n\n\n        // Draw chart line path\n        chartLinePaint.setColor(DEFAULT_CHART_COLOR);\n        chartLinePaint.setStyle(Paint.Style.STROKE);\n        canvas.drawPath(chartLinePath, chartLinePaint);\n\n        // Draw bottom area\n        if (isFillBottom) {\n            chartLinePaint.setStyle(Paint.Style.FILL);\n            chartLinePaint.setColor((DEFAULT_CHART_COLOR \u0026 0xFFFFFF) | 0x10000000);\n            chartLinePath.lineTo(points.get(size - 1).x, height);\n            chartLinePath.lineTo(points.get(0).x, height);\n            chartLinePath.close();\n            canvas.drawPath(chartLinePath, chartLinePaint);\n        }\n\n    }\n\n    private void drawPointCircles(Canvas canvas, List\u003cPointF\u003e points) {\n        if (isShowPoints) {\n            chartLinePaint.setColor(DEFAULT_CHART_COLOR);\n            chartLinePaint.setStyle(Paint.Style.FILL_AND_STROKE);\n            for (PointF point : points) {\n                canvas.drawCircle(point.x, point.y, circleSize / 2, chartLinePaint);\n            }\n            chartLinePaint.setStyle(Paint.Style.FILL);\n            chartLinePaint.setColor(Color.WHITE);\n            for (PointF point : points) {\n                canvas.drawCircle(point.x, point.y, (circleSize - strokeSize) / 2, chartLinePaint);\n            }\n        }\n    }\n\n    private void drawAxisYLabels(Canvas canvas) {\n        if (axisYLabels !\u003d null \u0026\u0026 axisYLabels.size() \u003e 0) {\n            final float heightWithoutBorders \u003d getMeasuredHeight() - bottomYOffset - topYOffset;\n            final float widthWithoutRightBorder \u003d getMeasuredWidth() - rightXOffset;\n            int yParts \u003d axisYLabels.size() - 1;\n            //TODO add spaces after max and before min values\n//            yParts +\u003d 2; // Add one part upper and one part above of min and max\n            textPaint.setTextAlign(Paint.Align.LEFT);\n            for (int i \u003d 0; i \u003c axisYLabels.size(); i++) {\n                float y \u003d ((heightWithoutBorders / yParts) * (yParts - i)) + topYOffset;\n                if (isShowXAxis) {\n                    // X Axis lines\n                    canvas.drawLine(leftXOffset, y, widthWithoutRightBorder, y, axisPaint);\n                }\n                canvas.drawText(axisYLabels.get(i), 0, y + textPaint.getTextSize() / 2, textPaint);\n            }\n        }\n    }\n\n    private void drawAxisXLabels(Canvas canvas) {\n        if (axisXLabels !\u003d null \u0026\u0026 axisXLabels.size() \u003e 0) {\n            final float heightWithoutBottomBorder \u003d getMeasuredHeight() - bottomYOffset;\n            final float widthWithoutBorders \u003d getMeasuredWidth() - leftXOffset - rightXOffset;\n            int dY \u003d axisXLabels.size() - 1;\n            textPaint.setTextAlign(Paint.Align.CENTER);\n            for (int i \u003d 0; i \u003c axisXLabels.size(); i++) {\n                float x \u003d ((widthWithoutBorders / dY) * i) + leftXOffset;\n                canvas.drawText(axisXLabels.get(i), x, getMeasuredHeight(), textPaint);\n            }\n        }\n    }\n\n}\n{","color":"#FF6A1B9A","name":"libChart","typeName":"","palette":"245","type":" ","spec":"moreBlock library CIRCLE_SIZE %d  STROKE_SIZE %d TEXT_SIZE %d BORDER %d CHART_COLOR %m.color "},{"code":"List\u003cFloat\u003e %1$s \u003d new ArrayList\u003cFloat\u003e();","color":"#FF6A1B9A","name":"newListFloat","typeName":"","palette":"245","type":" ","spec":"newListFloat %s.inputOnly "},{"code":"%1$s.add(%2$s);","color":"#FF6A1B9A","name":"addValue list Float","typeName":"","palette":"245","type":" ","spec":"addFloatList %s.inputOnly value number%d"},{"code":"float valor\u003dFloat.parseFloat(%1$s);\n// or  Float.valueOf(string)","color":"#FF6A1B9A","name":"string to float ","typeName":"","palette":"245","type":" ","spec":"string to float  value%s "},{"code":"valor","color":"#FF6A1B9A","name":"float","typeName":"","palette":"245","type":"d","spec":"float valor"},{"code":"%1$s \u003d new LineChartView(this);\n%2$s.addView(%1$s);","color":"#FF6A1B9A","name":"new Line Chart ","typeName":"","palette":"245","type":" ","spec":"newLineChart NameChart %s.inputOnly viewIn%m.view"},{"code":"%1$s.setSmoothSize(%2$sf);","color":"#FF6A1B9A","name":"SmoothSize","typeName":"","palette":"245","type":" ","spec":"setSmoothSize NameChart %s.inputOnly Size %s.inputOnly "},{"code":"%1$s.setFillBottom(%2$s);","color":"#FF6A1B9A","name":"FillBottom","typeName":"","palette":"245","type":" ","spec":"setFillBottom NameChart%s.inputOnly condition %b "},{"code":"%1$s.setShowYAxis(%2$s);","color":"#FF6A1B9A","name":"ShowYAxis","typeName":"","palette":"245","type":" ","spec":"setShowYAxis NameChart%s.inputOnly condition %b "},{"code":"%1$s.setShowPoints(%2$s);","color":"#FF6A1B9A","name":"ShowPoints","typeName":"","palette":"245","type":" ","spec":"setShowPoints NameChart%s.inputOnly condition %b "},{"code":"%1$s.setAxisTextSize(%2$s);","color":"#FF6A1B9A","name":"AxisTextSize","typeName":"","palette":"245","type":" ","spec":"setAxisTextSize NameChart%s.inputOnly  values%m.typeV"},{"code":"%1$s.setAxisYLabels(%2$s);","color":"#FF6A1B9A","name":"AxisYLabels","typeName":"","palette":"245","type":" ","spec":"setAxisYLabels NameChart%s.inputOnly listString%m.listStr "},{"code":"%1$s.setAxisXLabels(%2$s);","color":"#FF6A1B9A","name":"AxisXLabels","typeName":"","palette":"245","type":" ","spec":"setAxisXLabels NameChart%s.inputOnly listString%m.listStr "},{"code":"%1$s.setChartLineData(%2$s);","color":"#FF6A1B9A","name":"ChartLineData","typeName":"","palette":"245","type":" ","spec":"setChartLineData NameChart%s.inputOnly list%m.list "},{"code":"%1$s.setAxisTextColor(%2$s);","color":"#FF6A1B9A","name":"AxisTextColor","typeName":"","palette":"245","type":" ","spec":"setAxisTextColor NameChart%s.inputOnly value%m.typeZ "},{"code":"}\nprivate LineChartView %1$s;\n{","color":"#FF6A1B9A","name":"private","typeName":"","palette":"245","type":" ","spec":"private NameChart%s.inputOnly "},{"code":"R.dimen.axis_text_size","color":"#FF6A1B9A","name":"R.dimen.axis_text_size","typeName":"typeV","palette":"245","type":"v","spec":"R.dimen.axis_text_size"},{"code":"R.color.colorAxisText","color":"#FF6A1B9A","name":"R.color.colorAxisText","typeName":"typeZ","palette":"245","type":"v","spec":"R.color.colorAxisText"}]